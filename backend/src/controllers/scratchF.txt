RouteConfig:
export const ROLES = {
    ADMIN: 'admin',
    HR: 'hr',
    EMPLOYEE: 'employee',
    COACH: 'coach'
  };
  
  export const publicRoutes = [
    { path: '/', component: 'Home' },
    { path: '/login', component: 'Login' },
    { path: '/signup', component: 'Signup' }
  ];
  
  export const protectedRoutes = [
    {
      path: '/hr-dashboard',
      component: 'HRDashboard',
      allowedRoles: [ROLES.HR]
    },
    {
      path: '/employee-dashboard',
      component: 'EmployeeDashboard',
      allowedRoles: [ROLES.EMPLOYEE]
    },
    {
      path: '/coach-dashboard',
      component: 'CoachDashboard',
      allowedRoles: [ROLES.COACH]
    },
    {
      path: '/company-management',
      component: 'CompanyManagement',
      allowedRoles: [ROLES.ADMIN]
    },
    {
      path: '/coach-management',
      component: 'CoachManagement',
      allowedRoles: [ROLES.ADMIN]
    },
    {
      path: '/employee-management',
      component: 'EmployeeManagement',
      allowedRoles: [ROLES.HR]
    },
    {
      path: '/journal',
      component: 'Journal',
      allowedRoles: [ROLES.EMPLOYEE]
    },
    {
      path: '/settings',
      component: 'Settings',
      allowedRoles: [ROLES.ADMIN, ROLES.HR, ROLES.EMPLOYEE, ROLES.COACH]
    },
    {
      path: '/library',
      component: 'ResourceLibrary',
      allowedRoles: [ROLES.ADMIN, ROLES.HR, ROLES.EMPLOYEE, ROLES.COACH]
    }
  ];

app.js:
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");

const hrRoutes = require("./routes/hrRoutes");
const employeeRoutes = require("./routes/employeeRoutes");
const coachRoutes = require("./routes/coachRoutes");
const loginRoutes = require("./routes/loginRoutes");
const authenticateToken = require("./middleware/authMiddleware");
const logoutRoutes = require("./routes/logoutRoutes");
const companyRoutes = require("./routes/companyRoutes");
const wellnessSurveyRoutes = require("./routes/wellnessSurveyRoutes");
const resourceRoutes = require("./routes/resourceRoutes");

const app = express();

// Middleware
app.use(bodyParser.json());
app.use(cors());

const settingsRoutes = require('./routes/settingsRoutes');
app.use('/settings', settingsRoutes);

// Public Routes
app.use("/register/hr", hrRoutes);
// app.use("/register/coach", coachRoutes);
app.use("/login", loginRoutes);

// Consolidated Employee Routes
app.use("/employee", employeeRoutes);

// Consolidated Coach Routes
app.use("/coach", coachRoutes);

// Consolidated Company Routes
app.use("/company", companyRoutes);

app.use("/wellness-survey", wellnessSurveyRoutes);

app.use("/resources", resourceRoutes);
// Authenticated Routes Middleware
app.use(authenticateToken);

// Authenticated Routes
app.use("/logout", logoutRoutes);

module.exports = app;

ProtectedRoute:
import { Navigate, useLocation } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { selectAuth } from '../../redux/slices/authSlice';

const ProtectedRoute = ({ children, allowedRoles }) => {
  const { isAuthenticated, role } = useSelector(selectAuth);
  const location = useLocation();

  if (!isAuthenticated) {
    // Redirect to login while saving the attempted route
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  if (allowedRoles && !allowedRoles.includes(role)) {
    // Redirect to role-specific dashboard if authenticated but wrong role
    const dashboardRoutes = {
      hr: '/hr-dashboard',
      employee: '/employee-dashboard',
      coach: '/coach-dashboard',
      admin: '/admin-dashboard'
    };
    return <Navigate to={dashboardRoutes[role] || '/'} replace />;
  }

  return children;
};

export default ProtectedRoute;

authSlice:
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

// Async thunk for signup
export const signupUser = createAsyncThunk(
  'auth/signup',
  async ({ userData, role }, { rejectWithValue }) => {
    try {
      const response = await fetch(`http://localhost:5001/register/${role}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });

      if (!response.ok) {
        const errorData = await response.json();
        return rejectWithValue(errorData.error || 'Signup failed');
      }

      const data = await response.json();
      // Store token in localStorage
      localStorage.setItem('token', data.token);
      localStorage.setItem('userRole', role);
      return { ...data, role };
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

// Async thunk for login
export const loginUser = createAsyncThunk(
  'auth/login',
  async ({ email, password, role }, { rejectWithValue }) => {
    try {
      const response = await fetch('http://localhost:5001/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password, role }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        return rejectWithValue(errorData.error || 'Login failed');
      }

      const data = await response.json();
      // Store token in localStorage
      localStorage.setItem('token', data.token);
      localStorage.setItem('userRole', role);
      return { ...data, role };
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

// Async thunk for logout
export const logoutUser = createAsyncThunk(
  'auth/logout',
  async (_, { rejectWithValue }) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('http://localhost:5001/logout', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        return rejectWithValue(errorData.error || 'Logout failed');
      }

      // Clear localStorage
      localStorage.removeItem('token');
      localStorage.removeItem('userRole');
      return await response.json();
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

const initialState = {
  user: null,
  token: localStorage.getItem('token'),
  role: localStorage.getItem('userRole'),
  isAuthenticated: !!localStorage.getItem('token'),
  loading: false,
  error: null,
  registrationSuccess: false,
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    clearError: (state) => {
      state.error = null;
    },
    resetRegistrationSuccess: (state) => {
      state.registrationSuccess = false;
    },
  },
  extraReducers: (builder) => {
    // Signup cases
    builder
      .addCase(signupUser.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.registrationSuccess = false;
      })
      .addCase(signupUser.fulfilled, (state, action) => {
        state.loading = false;
        state.isAuthenticated = true;
        state.user = action.payload.user;
        state.token = action.payload.token;
        state.role = action.payload.role;
        state.registrationSuccess = true;
        state.error = null;
      })
      .addCase(signupUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
        state.registrationSuccess = false;
      })

    // Login cases
      .addCase(loginUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        state.loading = false;
        state.isAuthenticated = true;
        state.user = action.payload.user;
        state.token = action.payload.token;
        state.role = action.payload.role;
        state.error = null;
      })
      .addCase(loginUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

    // Logout cases
      .addCase(logoutUser.pending, (state) => {
        state.loading = true;
      })
      .addCase(logoutUser.fulfilled, (state) => {
        state.loading = false;
        state.isAuthenticated = false;
        state.user = null;
        state.token = null;
        state.role = null;
        state.error = null;
      })
      .addCase(logoutUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  },
});

export const { clearError, resetRegistrationSuccess } = authSlice.actions;

// Selectors
export const selectAuth = (state) => state.auth;
export const selectIsAuthenticated = (state) => state.auth.isAuthenticated;
export const selectUser = (state) => state.auth.user;
export const selectUserRole = (state) => state.auth.role;
export const selectAuthLoading = (state) => state.auth.loading;
export const selectAuthError = (state) => state.auth.error;

export default authSlice.reducer;

Signup component:
import React, { useState, useEffect } from 'react';
import { Container, Tabs, Tab, Form, Button, Alert, InputGroup } from 'react-bootstrap';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { signupUser } from '../../../redux/slices/authSlice';
import { fetchCompanies } from '../../../redux/slices/companySlice';
import { Link } from 'react-router-dom';
import './Signup.css';

const DOMAINS = ["Engineering", "Marketing", "Sales"];
const SPECIALIZATIONS = ["Therapy", "Music Therapy", "Art Therapy", "Meditation", "Yoga"];

const Signup = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { loading, error, isAuthenticated, role } = useSelector(state => state.auth);
  const companies = useSelector(state => state.companies);
  const [key, setKey] = useState('hr');

  useEffect(() => {
    dispatch(fetchCompanies());
  }, [dispatch]);

  // Role-based dashboard redirection
  useEffect(() => {
    if (isAuthenticated && role) {
      const dashboardRoutes = {
        hr: '/hr-dashboard',
        employee: '/employee-dashboard',
        coach: '/coach-dashboard'
      };
      navigate(dashboardRoutes[role] || '/');
    }
  }, [isAuthenticated, role, navigate]);

  // Form states
  const [hrForm, setHrForm] = useState({
    fullName: '',
    email: '',
    phone: '',
    companyName: '',
    domain: '',
    password: '',
    confirmPassword: ''
  });

  const [employeeForm, setEmployeeForm] = useState({
    fullName: '',
    company: '',
    emailPrefix: '',
    companyDomain: '',
    domain: '',
    phone: '',
    password: '',
    confirmPassword: ''
  });

  const [coachForm, setCoachForm] = useState({
    fullName: '',
    emailPrefix: '',
    phone: '',
    specialization: '',
    password: '',
    confirmPassword: ''
  });

  const [errors, setErrors] = useState({});

  // Form validation
  const validateForm = (type, form) => {
    const newErrors = {};
   
    // Validate name
    if (!form.fullName?.trim()) {
      newErrors.fullName = 'Full name is required';
    } else if (!/^[a-zA-Z\s]{2,50}$/.test(form.fullName)) {
      newErrors.fullName = 'Name should only contain letters and be 2-50 characters';
    }
   
    // Validate phone if provided
    if (form.phone && !/^\+?[\d]{10,15}$/.test(form.phone.replace(/[\s-]/g,''))) {
      newErrors.phone = 'Phone number must be 10-15 digits';
    }
   
    // Validate password
    const passwordError = validatePassword(form.password);
    if (passwordError) {
      newErrors.password = passwordError;
    }
   
    // Validate password confirmation
    if (form.password !== form.confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }
   
    // Role-specific validations
    const typeValidations = {
      hr: () => {
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/.test(form.email)) {
          newErrors.email = 'Please enter a valid email address';
        }
        if (!form.companyName?.trim() || form.companyName.length < 2) {
          newErrors.companyName = 'Company name must be at least 2 characters';
        }
        if (!form.domain?.trim()) {
          newErrors.domain = 'Domain is required';
        } else if (!/^@[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/.test(form.domain)) {
          newErrors.domain = 'Invalid domain format (e.g. @company.com)';
        }
      },
      employee: () => {
        if (!form.company) {
          newErrors.company = 'Please select a company';
        }
        if (!form.emailPrefix?.trim()) {
          newErrors.emailPrefix = 'Email prefix is required';
        } else if (!/^[a-zA-Z0-9._-]+$/.test(form.emailPrefix)) {
          newErrors.emailPrefix = 'Invalid email prefix format';
        }
        if (!form.domain) {
          newErrors.domain = 'Please select a domain';
        }
      },
      coach: () => {
        if (!form.emailPrefix?.trim()) {
          newErrors.emailPrefix = 'Email prefix is required';
        } else if (!/^[a-zA-Z0-9._-]+$/.test(form.emailPrefix)) {
          newErrors.emailPrefix = 'Invalid email prefix format';
        }
        if (!form.specialization) {
          newErrors.specialization = 'Please select a specialization';
        }
      }
    };
   
    typeValidations[type]?.();
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
   
  const validatePassword = (password) => {
    if (!password) return 'Password is required';
    
    const requirements = [
      { regex: /.{8,}/, message: 'At least 8 characters' },
      { regex: /[A-Z]/, message: 'One uppercase letter' },
      { regex: /[a-z]/, message: 'One lowercase letter' },
      { regex: /[0-9]/, message: 'One number' },
      { regex: /[!@#$%^&*(),.?":{}|<>]/, message: 'One special character' }
    ];
   
    const failed = requirements.filter(r => !r.regex.test(password));
    if (failed.length > 0) {
      return 'Password must contain: ' + failed.map(r => r.message).join(', ');
    }
    return '';
  };

  // Form submission
  const handleSubmit = (type) => async (e) => {
    e.preventDefault();
    const form = type === 'hr' ? hrForm : type === 'employee' ? employeeForm : coachForm;
    
    if (validateForm(type, form)) {
      try {
        let userData = {};
        
        switch(type) {
          case 'hr':
            userData = {
              fullName: form.fullName,
              email: form.email,
              phone: form.phone,
              companyName: form.companyName,
              domain: form.domain,
              password: form.password,
              confirmPassword: form.confirmPassword
            };
            break;
            
          case 'employee':
            const company = companies.list.find(c => c.id === parseInt(form.company));
            userData = {
              fullName: form.fullName,
              companyId: form.company,
              email: `${form.emailPrefix}${company.domain}`,
              domain: form.domain,
              phone: form.phone,
              password: form.password,
              confirmPassword: form.confirmPassword
            };
            break;
            
          case 'coach':
            userData = {
              fullName: form.fullName,
              email: `${form.emailPrefix}@soulscouts.com`,
              phone: form.phone,
              specialization: form.specialization,
              password: form.password,
              confirmPassword: form.confirmPassword
            };
            break;
            
          default:
            throw new Error('Invalid user type');
        }
  
        await dispatch(signupUser({ userData, role: type })).unwrap();
      } catch (err) {
        console.error('Signup failed:', err);
      }
    }
  };

  return (
    <Container className="signup-container">
      <h1 className="text-center mb-4">Sign Up</h1>
      {error && <Alert variant="danger">{error}</Alert>}
      
      <Tabs
        id="signup-tabs"
        activeKey={key}
        onSelect={(k) => setKey(k)}
        className="mb-4"
      >
        {/* HR Tab */}
        <Tab eventKey="hr" title="HR">
          <Form onSubmit={handleSubmit('hr')}>
            <Form.Group className="mb-3">
              <Form.Label>Full Name</Form.Label>
              <Form.Control
                type="text"
                value={hrForm.fullName}
                onChange={(e) => setHrForm({...hrForm, fullName: e.target.value})}
                isInvalid={!!errors.fullName}
              />
              <Form.Control.Feedback type="invalid">
                {errors.fullName}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Email</Form.Label>
              <Form.Control
                type="email"
                value={hrForm.email}
                onChange={(e) => setHrForm({...hrForm, email: e.target.value})}
                isInvalid={!!errors.email}
              />
              <Form.Control.Feedback type="invalid">
                {errors.email}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Phone Number (Optional)</Form.Label>
              <Form.Control
                type="tel"
                value={hrForm.phone}
                onChange={(e) => setHrForm({...hrForm, phone: e.target.value})}
                isInvalid={!!errors.phone}
              />
              <Form.Control.Feedback type="invalid">
                {errors.phone}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Company Name</Form.Label>
              <Form.Control
                type="text"
                value={hrForm.companyName}
                onChange={(e) => setHrForm({...hrForm, companyName: e.target.value})}
                isInvalid={!!errors.companyName}
              />
              <Form.Control.Feedback type="invalid">
                {errors.companyName}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Domain</Form.Label>
              <Form.Control
                type="text"
                placeholder="@company.com"
                value={hrForm.domain}
                onChange={(e) => setHrForm({...hrForm, domain: e.target.value})}
                isInvalid={!!errors.domain}
              />
              <Form.Control.Feedback type="invalid">
                {errors.domain}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Password</Form.Label>
              <Form.Control
                type="password"
                value={hrForm.password}
                onChange={(e) => setHrForm({...hrForm, password: e.target.value})}
                isInvalid={!!errors.password}
              />
              <Form.Control.Feedback type="invalid">
                {errors.password}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Confirm Password</Form.Label>
              <Form.Control
                type="password"
                value={hrForm.confirmPassword}
                onChange={(e) => setHrForm({...hrForm, confirmPassword: e.target.value})}
                isInvalid={!!errors.confirmPassword}
              />
              <Form.Control.Feedback type="invalid">
                {errors.confirmPassword}
              </Form.Control.Feedback>
            </Form.Group>

            <Button variant="primary" type="submit" disabled={loading}>
              {loading ? 'Signing up...' : 'Sign Up'}
            </Button>
            <div className="signup-link">
                Already have an account? <Link to="/login">Login here</Link>
            </div>
          </Form>
        </Tab>

        {/* Employee Tab */}
        <Tab eventKey="employee" title="Employee">
          <Form onSubmit={handleSubmit('employee')}>
            <Form.Group className="mb-3">
              <Form.Label>Full Name</Form.Label>
              <Form.Control
                type="text"
                value={employeeForm.fullName}
                onChange={(e) => setEmployeeForm({...employeeForm, fullName: e.target.value})}
                isInvalid={!!errors.fullName}
              />
              <Form.Control.Feedback type="invalid">
                {errors.fullName}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Company</Form.Label>
              <Form.Select
                value={employeeForm.company}
                onChange={(e) => {
                  const selectedCompany = companies.list.find(c => c.id === parseInt(e.target.value));
                  setEmployeeForm({
                    ...employeeForm,
                    company: e.target.value,
                    companyDomain: selectedCompany?.domain || '@company.com'
                  });
                }}
                isInvalid={!!errors.company}
              >
                <option value="">Select Company</option>
                {companies.list.map(company => (
                  <option key={company.id} value={company.id}>
                    {company.name}
                  </option>
                ))}
              </Form.Select>
              <Form.Control.Feedback type="invalid">
                {errors.company}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Email</Form.Label>
              <InputGroup>
                <Form.Control
                  type="text"
                  value={employeeForm.emailPrefix}
                  onChange={(e) => setEmployeeForm({...employeeForm, emailPrefix: e.target.value})}
                  placeholder="email prefix"
                  isInvalid={!!errors.emailPrefix}
                />
                <InputGroup.Text>
                  {employeeForm.companyDomain || '@company.com'}
                </InputGroup.Text>
                <Form.Control.Feedback type="invalid">
                  {errors.emailPrefix}
                </Form.Control.Feedback>
              </InputGroup>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Domain</Form.Label>
              <Form.Select
                value={employeeForm.domain}
                onChange={(e) => setEmployeeForm({...employeeForm, domain: e.target.value})}
                isInvalid={!!errors.domain}
              >
                <option value="">Select Domain</option>
                {DOMAINS.map(domain => (
                  <option key={domain} value={domain}>
                    {domain}
                  </option>
                ))}
              </Form.Select>
              <Form.Control.Feedback type="invalid">
                {errors.domain}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Phone Number (Optional)</Form.Label>
              <Form.Control
                type="tel"
                value={employeeForm.phone}
                onChange={(e) => setEmployeeForm({...employeeForm, phone: e.target.value})}
                isInvalid={!!errors.phone}
              />
              <Form.Control.Feedback type="invalid">
                {errors.phone}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Password</Form.Label>
              <Form.Control
                type="password"
                value={employeeForm.password}
                onChange={(e) => setEmployeeForm({...employeeForm, password: e.target.value})}
                isInvalid={!!errors.password}
              />
              <Form.Control.Feedback type="invalid">
                {errors.password}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Confirm Password</Form.Label>
              <Form.Control
                type="password"
                value={employeeForm.confirmPassword}
                onChange={(e) => setEmployeeForm({...employeeForm, confirmPassword: e.target.value})}
                isInvalid={!!errors.confirmPassword}
              />
              <Form.Control.Feedback type="invalid">
                {errors.confirmPassword}
              </Form.Control.Feedback>
            </Form.Group>

            <Button variant="primary" type="submit" disabled={loading}>
              {loading ? 'Signing up...' : 'Sign Up'}
            </Button>
            <div className="signup-link">
                Already have an account? <Link to="/login">Login here</Link>
            </div>
          </Form>
        </Tab>

        {/* Coach Tab */}
        <Tab eventKey="coach" title="Coach">
          <Form onSubmit={handleSubmit('coach')}>
            <Form.Group className="mb-3">
              <Form.Label>Full Name</Form.Label>
              <Form.Control
                type="text"
                value={coachForm.fullName}
                onChange={(e) => setCoachForm({...coachForm, fullName: e.target.value})}
                isInvalid={!!errors.fullName}
              />
              <Form.Control.Feedback type="invalid">
                {errors.fullName}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Email</Form.Label>
              <InputGroup>
                <Form.Control
                  type="text"
                  value={coachForm.emailPrefix}
                  onChange={(e) => setCoachForm({...coachForm, emailPrefix: e.target.value})}
                  placeholder="email prefix"
                  isInvalid={!!errors.emailPrefix}
                />
                <InputGroup.Text className="email-domain">
                  @soulscouts.com
                </InputGroup.Text>
                <Form.Control.Feedback type="invalid">
                  {errors.emailPrefix}
                </Form.Control.Feedback>
              </InputGroup>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Phone Number (Optional)</Form.Label>
              <Form.Control
                type="tel"
                value={coachForm.phone}
                onChange={(e) => setCoachForm({...coachForm, phone: e.target.value})}
                isInvalid={!!errors.phone}
              />
              <Form.Control.Feedback type="invalid">
                {errors.phone}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Specialization</Form.Label>
              <Form.Select
                value={coachForm.specialization}
                onChange={(e) => setCoachForm({...coachForm, specialization: e.target.value})}
                isInvalid={!!errors.specialization}
              >
                <option value="">Select Specialization</option>
                {SPECIALIZATIONS.map(spec => (
                  <option key={spec} value={spec}>
                    {spec}
                  </option>
                ))}
              </Form.Select>
              <Form.Control.Feedback type="invalid">
                {errors.specialization}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Password</Form.Label>
              <Form.Control
                type="password"
                value={coachForm.password}
                onChange={(e) => setCoachForm({...coachForm, password: e.target.value})}
                isInvalid={!!errors.password}
              />
              <Form.Control.Feedback type="invalid">
                {errors.password}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Confirm Password</Form.Label>
              <Form.Control
                type="password"
                value={coachForm.confirmPassword}
                onChange={(e) => setCoachForm({...coachForm, confirmPassword: e.target.value})}
                isInvalid={!!errors.confirmPassword}
              />
              <Form.Control.Feedback type="invalid">
                {errors.confirmPassword}
              </Form.Control.Feedback>
            </Form.Group>

            <Button variant="primary" type="submit" disabled={loading}>
              {loading ? 'Signing up...' : 'Sign Up'}
            </Button>
            <div className="signup-link">
                Already have an account? <Link to="/login">Login here</Link>
            </div>
          </Form>
        </Tab>
      </Tabs>
    </Container>
  );
};

export default Signup;

CompanySlice:

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

export const fetchCompanies = createAsyncThunk(
  'companies/fetchAll',
  async (_, { rejectWithValue }) => {
    try {
      const response = await fetch('http://localhost:5001/company/getAll');
      if (!response.ok) throw new Error('Failed to fetch companies');
      return await response.json();
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

const companySlice = createSlice({
  name: 'companies',
  initialState: {
    list: [],
    loading: false,
    error: null
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchCompanies.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchCompanies.fulfilled, (state, action) => {
        state.loading = false;
        state.list = action.payload.companies;
      })
      .addCase(fetchCompanies.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  }
});

export default companySlice.reducer;

store.js:

import { configureStore } from '@reduxjs/toolkit';
import authReducer from './slices/authSlice';
import resourcesReducer from './slices/resourcesSlice';
import companyReducer from './slices/companySlice';
import coachReducer from './slices/coachSlice';
import employeeReducer from './slices/employeeSlice';
import journalReducer from './slices/journalSlice';

const store = configureStore({
  reducer: {
    auth: authReducer,
    resources: resourcesReducer,
    companies: companyReducer,
    coaches: coachReducer,
    employees: employeeReducer,
    journal: journalReducer
  }
});

export * from './slices/resourcesSlice';
export default store;